filtro :: (a -> Bool) -> [a] -> [a]
filtro _ [] = []  -- Caso base: lista vacía
filtro f (x:xs)
    | f x       = x : filtro f xs  -- Agrega x a la lista si f x es True y continúa filtrando el resto de la lista
    | otherwise = filtro f xs      -- De lo contrario, continúa filtrando el resto de la lista sin agregar x


esNumeroPar :: Int -> Bool
esNumeroPar n = n `mod` 2 == 0

main :: IO ()
main = do
    let listaSinFiltro = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        listaConFiltro = filtro esNumeroPar listaSinFiltro
    putStrLn "Lista original:"
    print listaSinFiltro
    putStrLn "Lista filtrada (números pares):"
    print listaConFiltro
